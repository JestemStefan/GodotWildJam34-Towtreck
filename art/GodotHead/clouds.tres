[gd_resource type="ShaderMaterial" load_steps=9 format=2]

[sub_resource type="OpenSimplexNoise" id=1]
seed = 6
octaves = 5
period = 24.7
persistence = 0.575

[sub_resource type="NoiseTexture" id=2]
seamless = true
noise = SubResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = SubResource( 2 )

[sub_resource type="Gradient" id=4]
offsets = PoolRealArray( 0.496136, 0.57187, 0.704791 )
colors = PoolColorArray( 0, 0, 0, 1, 0.578125, 0.578125, 0.578125, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=5]
gradient = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
output_port_for_preview = 0
texture = SubResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShader" id=8]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out4p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out2p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALPHA = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -531, 32.9236 )
nodes/fragment/0/position = Vector2( 320, 160 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -160, 100 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( 80, 100 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -380, 200 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 2, 0, 3, 0, 0, 1 )

[resource]
shader = SubResource( 8 )
